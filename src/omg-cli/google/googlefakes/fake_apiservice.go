// Code generated by counterfeiter. DO NOT EDIT.
package googlefakes

import (
	"omg-cli/google"
	"sync"
)

type FakeAPIService struct {
	EnableStub        func([]google.API) ([]google.API, error)
	enableMutex       sync.RWMutex
	enableArgsForCall []struct {
		arg1 []google.API
	}
	enableReturns struct {
		result1 []google.API
		result2 error
	}
	enableReturnsOnCall map[int]struct {
		result1 []google.API
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIService) Enable(arg1 []google.API) ([]google.API, error) {
	var arg1Copy []google.API
	if arg1 != nil {
		arg1Copy = make([]google.API, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.enableMutex.Lock()
	ret, specificReturn := fake.enableReturnsOnCall[len(fake.enableArgsForCall)]
	fake.enableArgsForCall = append(fake.enableArgsForCall, struct {
		arg1 []google.API
	}{arg1Copy})
	fake.recordInvocation("Enable", []interface{}{arg1Copy})
	fake.enableMutex.Unlock()
	if fake.EnableStub != nil {
		return fake.EnableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIService) EnableCallCount() int {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	return len(fake.enableArgsForCall)
}

func (fake *FakeAPIService) EnableCalls(stub func([]google.API) ([]google.API, error)) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = stub
}

func (fake *FakeAPIService) EnableArgsForCall(i int) []google.API {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	argsForCall := fake.enableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPIService) EnableReturns(result1 []google.API, result2 error) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = nil
	fake.enableReturns = struct {
		result1 []google.API
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIService) EnableReturnsOnCall(i int, result1 []google.API, result2 error) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = nil
	if fake.enableReturnsOnCall == nil {
		fake.enableReturnsOnCall = make(map[int]struct {
			result1 []google.API
			result2 error
		})
	}
	fake.enableReturnsOnCall[i] = struct {
		result1 []google.API
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPIService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ google.APIService = new(FakeAPIService)
